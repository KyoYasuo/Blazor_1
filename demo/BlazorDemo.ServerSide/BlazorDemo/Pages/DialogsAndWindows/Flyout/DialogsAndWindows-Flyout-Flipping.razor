@using DevExpress.Blazor.Internal
<DemoPageSectionComponent Id="DialogsAndWindows-Flyout-Flipping" ShowSizeMode="true">
    <OptionsContent>
        <OptionComboBox Label="Close mode:" CssClass="ow-100" Data="@CloseModes" @bind-Value="@CloseMode"/>
        <OptionCheckBox Label="Fit to container" @bind-Checked="FitToRestriction"/>
    </OptionsContent>
    <ChildContentWithParameters Context="Params">
        <div class="@(IsMobile ? "" : "card") flipping-overflow-container">
            <dxbl-demo-scrollable center-horizontally center-vertically id="flipping-target-container" class="flipping-overflow-content">
                <DxButton
                    CssClass="flipping-button"
                    RenderStyle="@ButtonRenderStyle.Secondary"
                    Click="() => IsOpen = !IsOpen">SHOW A FLYOUT</DxButton>
            </dxbl-demo-scrollable>
            <DxFlyout
                @bind-IsOpen=IsOpen
                PositionTarget=".flipping-button"
                RestrictionTarget=".flipping-overflow-container"
                RestrictionMode="FlyoutRestrictionMode.TargetElement"
                CloseOnOutsideClick="false"
                PreventCloseOnPositionTargetClick="true"
                CloseMode="@CloseMode"
                FitToRestriction="@FitToRestriction"
                SizeMode="Params.SizeMode"
                Width="240">
                <span style="font-size: 0.75rem">@Constants.ContentShort</span>
            </DxFlyout>
        </div>
    </ChildContentWithParameters>

    @code {

        [Inject]
        IEnvironmentInfo EnvironmentInfo { get; set; }
        bool IsOpen { get; set; } = false;
        bool IsMobile { get; set; }
        bool FitToRestriction { get; set; }
        FlyoutCloseMode[] CloseModes { get; } = Enum.GetValues<FlyoutCloseMode>();
        FlyoutCloseMode CloseMode { get; set; } = FlyoutCloseMode.Hide;

        protected override async Task OnAfterRenderAsync(bool firstRender) {
            if (firstRender) {
                await EnvironmentInfo.InitializeRuntime();
                var deviceInfo = await EnvironmentInfo.DeviceInfo;
                IsMobile = deviceInfo.IsMobileDevice;
            }
            await base.OnAfterRenderAsync(firstRender);
        }
    }

</DemoPageSectionComponent>
